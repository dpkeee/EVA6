# -*- coding: utf-8 -*-
"""Resnet18.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O95k-dTw5BhoYJ-ZKkMsm29U_PWvfbQJ
"""

import torch
import torch.nn as nn
import torch.nn.functional as F

class BasicBlock(nn.Module):
  expansion = 1

  def __init__(self, in_planes, planes, stride=1,dropput=0.0):
    super(BasicBlock, self).__init__()
    self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)
    self.bn1 = nn.BatchNorm2d(planes)
    self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)
    self.bn2 = nn.BatchNorm2d(planes)
    self.dropout = dropout


      

  def forward(self, x):
    identity = x

    out = self.conv1(x)
    out = self.bn1(out)
    out = self.relu(out)

    out = self.conv2(out)
    out = self.bn2(out)

      
    out += identity
    out = self.relu(out)

    return out

class ResNet(nn.Module):
  def __init__(self, block, layers, num_classes=1000,dropput=0.0):

    super(ResNet, self).__init__()
    self.in_planes = 64
    self.dropout = dropout


    self.conv1 = nn.Conv2d(3, 64,kernel_size=7, stride=2, padding=3,bias=False)
    self.bn1 = nn.BatchNorm2d(64)
    self.relu = nn.ReLU(inplace=True)
    self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
    
    self.layer1 = self._make_layer(block, 64, layers[0],stride=1)
    self.layer2 = self._make_layer(block, 128, layers[1], stride=2)
                                     
    self.layer3 = self._make_layer(block, 256, layers[2], stride=2)
    self.layer4 = self._make_layer(block, 512, layers[3], stride=2)
                                       
    self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
    self.fc = nn.Linear(512 * block.expansion, num_classes)
      
  def _make_layer(self, block, planes, num_blocks, stride=1):
    strides = [stride] + [1]*(num_blocks-1)
    layers = []
    for stride in strides:
      layers.append(block(self.in_planes, planes, stride))
      self.in_planes = planes * block.expansion
      return nn.Sequential(*layers)  


  def forward(self, x):
    x = self.conv1(x)
    x = self.bn1(x)
    x = self.relu(x)
    x = self.maxpool(x)

    x = self.layer1(x)
    x = self.layer2(x)
    x = self.layer3(x)
    x = self.layer4(x)

    x = self.avgpool(x)
    x = x.view(x.size(0), -1)
    x = self.linear(x)
    x = torch.flatten(x, 1)
    x = self.fc(x)

    return x

  def ResNet18(num_classes= 200,dropput=0.0):
    return ResNet(BasicBlock, [2,2,2,2], num_classes=num_classes,dropout = dropout)

